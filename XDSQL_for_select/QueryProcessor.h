#pragma once

/*
查询处理层头文件
负责给SQL引擎提供相关接口和相应结构体设计
*/

#ifndef QUERYPROCESSOR_H
#define QUERYPROCESSOR_H

#include "MetadataManager.h"
#include"StorageEngine.h"
//#include"StorageClass.h"
#include<stdio.h>
#include<string>
#include<string.h>
//

/*语法制导翻译中，储存用户输入信息的结构体*/

/* 结构体coldatanode：列数据结构体,储存列的属性与数据 */
typedef struct coldatanode {
	char* colname;			/*列名*/
	char* tablename;		/*列所属表的名称*/
	int coltype;			/*列的数据类型，用整型编号表示。1--int 2--string*/
	int size;				/*列在物理文件中的长度（以字节为单位）*/
	char* data;				/*列中的数据，用字节数组储存*/
}coldatanode;

//SQL引擎的
/* 结构体values：储存用户输入中变量名、字符串及数字的信息*/
struct values {
	char* name;			/*用户输入的字符串*/
	int intnum;			/*存储数字的值*/
	int length;			/*记录变量名、字符串、数字储存在内存中的长度（以字节为单位）*/
};

//SQL引擎的
/* 结构体coltype：记录表中列的数据类型*/
struct coltype {
	int type;		/*记录数据类型，type=1列为int类型，type=2为字符串类型*/
	int length;		/*列的长度（以字节为单位）*/
};	

//SQL引擎的
/* 结构体col：记录列属性，用在链表中，用于createtable语句的cols和col，以及insert语句的colnames */
struct col {
	char* name;				/*列名*/
	int type;				/*列的数据类型，编号表示。1--int型；2--sring型*/
	int length;				/*列的长度（以字节为单位）*/
	struct col* next;		/*指向下一个col节点的指针*/
};

/* 结构体createTablesql：储存创建表要使用到的数据，用于createtable语句 */
struct createTablesql {
	char* tablename;		/*表名*/
	struct col* cols;		/*储存列属性的链表*/
};

/*SQL引擎使用*/
/* 结构体datanode：变量值结构，用于记录变量值信息，用于insert语句和update语句 */
struct datanode {
	char* data;				/*变量的值，储存在data字节数组中*/
	int type;				/*变量的数据类型。1--int类型，2--string类型*/
	int length;				/*变量的长度（以字节为单位）*/
	struct datanode* next;	/*指向下一个datanode节点的指针*/														
};

/*SQL引擎使用*/
/* 结构体insertsql：储存插入行命令要使用的数据，用于insert语句 */
struct insertsql {
	char* tablename;			/*表名*/
	struct col* colnames;		/*储存一行各列属性的链表*/
	struct datanode* datanodes;	/*储存一行各列数据的链表*/
};

/* 结构体tablecol：表名列名结构体，用于select语句的tables和tablecolconfs */
struct tablecol {
	char* tablename;		/*表名*/
	char* colname;			/*列名*/
	struct tablecol* next;	/*指向下一个tablecol节点的指针*/
};

/* 结构体tablecolconf：列属性结构体，储存被查询的列，用于select语句的tablecolconf */
struct tablecolconf {
	int isALL;						/* 0指选择全部列，1指选择指定列 */
	struct tablecol* tablecols;		/* 链表，储存所有被查询的列的信息与属性 */
};

/* 结构体condition：条件判断结构体，用于select语句、update语句、delete语句 */
struct condition {
	
	int left_type;						/*左值类型：0：条件表达式不存在左值 1：INT 2：STRING 3：列名 4：条件表达式*/
	struct datanode* left_data;			/*若左值是变量，left_data储存变量的值和其他信息*/
	struct tablecol* left_col;			/*若左值是列名，left_col储存列名表名信息*/
	struct coldatanode* left_col_data;	/*若左值是列名，left_col_data储存列的数据*/
	struct condition* left_cond;		/*若左值是条件，left_cond储存左值条件的指针*/

	int right_type;						/*右值类型*/
	struct datanode* right_data;		/*若右值是变量，right_data储存变量的值和其他信息*/
	struct tablecol* right_col;			/*若右值是列名，right_col储存列名表名信息*/
	struct coldatanode* right_col_data;	/*若右值是列名，right_col_data储存列的数据*/
	struct condition* right_cond;		/*若右值是条件，right_cond储存右值条件的指针*/

	int comp_op;						/*比较运算符，用编号表示。0：条件表达式不存在比较运算符 1:<  2:>  3:<=  4：>=  5: =  6:!=	*/
	int comp_cond;						/*逻辑运算符，用编号表示。0：条件表达式不存在逻辑运算符 1:AND 2:OR 3:NOT */
	bool result;						/*条件表达式的逻辑值。true/false*/
};



/* 结构体comparator：条件判断值结构体，用于select语句、update语句、delete语句 */
struct comparator {
	int type;					/*1--int数,2--string,3--列名*/
	struct datanode* data;		/**/
	struct tablecol* tablecol;	/**/
};

/* 结构体selectsql：储存查询命令要使用的信息，用于select语句 */
struct selectsql {
	struct tablecolconf* tablecolconf;		/*被查询的列*/
	struct tablecol* tables;				/*被查询的表*/
	struct condition* whereconf;			/*查询条件*/
};

/* 结构体setconf：值设定结构体，储存表更新中使用到的值，用于update语句 */
struct setconf {
	struct tablecol* col;				/*更新中使用的表名与列名*/
	struct datanode* datanode;			/*更新中使用的变量值*/
	struct coldatanode* coldatanode;	/*列的原始数据值*/
	struct setconf* next;				/*指向下一个setconf节点的指针*/
};

/* 结构体updatesql：储存更新命令要使用的信息，更新语句结构，用于update语句 */
struct updatesql {
	char* tablename;				/*被更新表的名称*/
	struct setconf* setconfs;		/*更新用到的的变量值和列值*/
	struct condition* whereconf;	/*条件判断*/
};

/* 结构体deletesql：储存删除行使用的信息，删除语句结构，用于delete语句 */
struct deletesql {
	char* tablename;				/*表名*/
	struct condition* whereconf;	/*条件判断*/
};



/*内部函数*/

/*******************************************************************************************************************
	函数：setUseDB
	功能：将字符串dbname指定的数据库设置为当前使用的数据库
	input：字符串，储存数据库名
	output：void
*******************************************************************************************************************/
void setUseDB(char* dbname);

/*******************************************************************************************************************
	函数：dbnameADDtablename
	功能：根据数据库名称和数据表名称构造表物理文件的路径 "dbname\\tablename"
	input：数据库名dbname，数据表名tablename
	output：合成的文件路径名
*******************************************************************************************************************/
char* dbnameADDtablename(char* dbname, char* tablename);

/*******************************************************************************************************************
	函数：isMateDataTable
	功能：用于select语句中，判断待查询表是否为系统表。
	input：待查询表的表名tablename
	output：待查询表是系统表返回true，否则返回false
*******************************************************************************************************************/
bool isMateDataTable(char* tablename);

/*******************************************************************************************************************
	函数：setColInColData
	功能：从元数据管理器中获得列元信息，并使用列元信息给coldatanode结构体中的成员赋值
	input：指向coldatanode列数据结构体的指针，指向colNode列元信息结构体的指针
	output：void
*******************************************************************************************************************/
void setColInColData(coldatanode* coldatanode, colNode* colnode);

/*******************************************************************************************************************
	函数：setDataInColData
	功能：将列的值存入列数据结构体中
	input：指向列数据结构体的指针coldatanode，列的值data（字节数组类型）
	output：void
*******************************************************************************************************************/
void setDataInColData(coldatanode* coldatanode, char* data);

/*******************************************************************************************************************
	函数：colListToDataArray
	功能：将从元数据管理器得到的列元信息链表中的多个列元信息存入对应的列数据结构体中
	input：指向列元信息链表colNodeList的指针list，指向列数据结构体数组的指针dataarray
	output：void
*******************************************************************************************************************/
void colListToDataArray(colNodeList* list, coldatanode* dataarray);

/*******************************************************************************************************************
	函数：colDataToRow
	功能：将列数据数组colDataToRow转化为物理文件中储存的一行数据row
	input：指向列数据数组的指针dataarray，列数据数组的元素个数arraynum，结果行row
	output：void
*******************************************************************************************************************/
void colDataToRow(coldatanode* dataarray, int arraynum, char* row);

/*******************************************************************************************************************
	函数：rowToColData
	功能：从一行数据row中读取各列数据，并依次将数据加入列数据数组dataarray
	input：指向列数据数组的指针dataarray，列数据数组的元素个数arraynum，结果行row
	output：void
*******************************************************************************************************************/
void rowToColData(char* row, coldatanode* dataarray, int arraynum);

/*******************************************************************************************************************
	函数：isExistDB
	功能：判断数据库dbname是否已存在
	input：数据库名称dbname
	output：若数据库已存在，返回true，否则返回false
*******************************************************************************************************************/
bool isExistDB(char* dbname);

/*******************************************************************************************************************
	函数：isExistTable
	功能：判断数据表tablename是否已存在于当前数据库中
	input：数据表名称tablename
	output：如果数据表已存在于当前数据库，返回true；否则返回false
*******************************************************************************************************************/
bool isExistTable(char* tablename);

/*******************************************************************************************************************
	函数：tablejoin
	功能：生成多个表的笛卡尔积。对tablenode链表中的所有表求笛卡尔积，并将结果保存在临时表文件中
	input：由表节点组成的链表tablenode，用于暂存笛卡尔积中一个元组的字节数组row，
		   index记录tablenode链表中一个表的列储存在在row中的起始下标，sp是临时表文件的的文件结构体
	output：void
*******************************************************************************************************************/
void tablejoin(tableNode* tablenode, char* row, int index, storageNode* sp);

/*******************************************************************************************************************
	函数：generateTempTable
	功能：生成临时表temp，并计算tablelist中多个表的笛卡尔积，将计算结果保存在temp临时表中
	input：指向数据表信息链表的指针tablelist
	output：指向临时表节点的指针
*******************************************************************************************************************/
tableNode* generateTempTable(tableNodeList* tablelist);

/*******************************************************************************************************************
	函数：deleteTempTable
	功能：将当前数据库中的临时表物理文件删除
	input：void
	output：删除成功返回true，否则返回false。
*******************************************************************************************************************/
bool deleteTempTable();

/*******************************************************************************************************************
	函数：selectColname
	功能：从列数据结构体数组datanodearray中，查找与列名colname对应的datanode，返回该datanode在数组中的下标
	input：表名tablename，列名colname，列数据结构体数组datanodearray，数组元素个数arraynum
	output：与列名colname对应的datanode在数组中的下标。若返回-1，说明查找失败
*******************************************************************************************************************/
int selectColname(char* tablename, char* colname, coldatanode* datanodearray, int arraynum);

/*******************************************************************************************************************
	函数：conditionLinkData
	功能：将条件结构体（条件树）conditions中的列名与列数据值数组datanodearray绑定
	input：指向条件树根节点的指针conditions，储存用户输入值的列数据数组datanodearray，datanodearray的元素个数
	output：全部绑定成功返回true，否则返回false
*******************************************************************************************************************/
bool conditionLinkData(struct condition* conditions, coldatanode* datanodearray, int arraynum);

/*******************************************************************************************************************
	函数：checkconditions
	功能：检查条件判断树的任一子树中，左值与右值的数据类型是否相同。
	input：指向条件判断树根节点的指针conditions
	output：若整个条件判断树的所有子树中，左值与右值数据类型相同，返回true；否则返回false
*******************************************************************************************************************/
bool checkconditions(struct condition* conditions);

/*******************************************************************************************************************
	函数：showcolname
	功能：以tablename.colname的格式显示列名
	input：表名tablename，列名colname
	output：void
*******************************************************************************************************************/
void showcolname(char* tablename, char* colname); 

/*******************************************************************************************************************
	函数：dealcalcondition
	功能：对运算符是比较运算符且左右值为int型的条件表达式求逻辑值
	input：指向条件判断式节点的指针condition
	output：条件式成立返回true，否则返回false
*******************************************************************************************************************/
bool dealcalcondition(struct condition* condition);

/*******************************************************************************************************************
	函数：dealstringcondition
	功能：对运算符是比较运算符且左右值为string型的条件表达式求逻辑值
	input：指向条件判断式节点的指针condition
	output：条件式成立返回true，否则返回false
*******************************************************************************************************************/
bool dealstringcondition(struct condition* condition);

/*******************************************************************************************************************
	函数：dealconditions
	功能：求解条件判断式的逻辑值
	input：指向条件判断式（条件判断树）的指针
	output：若条件式为真，返回true；否则返回false
*******************************************************************************************************************/
bool dealconditions(struct condition* conditions);

/*******************************************************************************************************************
	函数：showcoldata
	功能：对给定的列数据结构体数组dataarray，按照showorder数组指定的顺序将dataarray中的列的值输出
	input：列数据结构体数组dataarray，showorder数组用于指定输出的列及其输出顺序，shownum为showorder数组的元素个数
	output：void
*******************************************************************************************************************/
void showcoldata(coldatanode* dataarray, int* showorder, int shownum);

/*******************************************************************************************************************
	函数：updatesetconf
	功能：对setconf链表中的每一个setconf结构体，将更新值赋给列原始数据
	input：指向setconf链表的指针setconfs
	output：void
*******************************************************************************************************************/
void updatesetconf(struct setconf* setconfs);



/*查询处理层的接口函数*/

/******************************************************************************************************************
	函数：createDB
	功能：根据dbname创建数据库的文件夹与表元数据表、列元数据表
	input：数据库的名称dbname
	output：void
*******************************************************************************************************************/
void createDB(char* dbname);

/*******************************************************************************************************************
	函数：dropDB
	功能：删除数据库dbname，删除该数据库的所有表文件和文件夹，并将其从库元数据表中删除
	input：数据库名称dbname
	output：void
*******************************************************************************************************************/
void dropDB(char* dbname);

/*******************************************************************************************************************
	函数：useDB
	功能：将当前使用的数据库切换为dbname数据库
	input：数据库名称dbname
	output：void
*******************************************************************************************************************/
void useDB(char* dbname);

/*******************************************************************************************************************
	函数：showDB
	功能：输出数据库系统中所有数据库的名称和数据库的数量
	input：void
	output：void
*******************************************************************************************************************/
void showDB();

/*******************************************************************************************************************
	函数：showTable
	功能：输出当前数据库中所有用户数据表的表名、列的数目、一行的长度，和用户数据表的数量
	input：void
	output：void
*******************************************************************************************************************/
void showTable();

/*******************************************************************************************************************
	函数：createTable
	功能：根据createTablesql结构体中的新数据表的信息，在当前数据库中创建用户数据表，
		  并将其表元信息与列元信息记录在表元数据表与列元数据表中
	input：指向createTablesql结构体的指针
	output：void
*******************************************************************************************************************/
void createTable(struct createTablesql* createTablesql);

/*******************************************************************************************************************
	函数：dropTable
	功能：从当前数据库删除名称为tablename的用户数据表，并在表元数据表和列元数据表中删除对应的信息
	input：表名tablename
	output：void
*******************************************************************************************************************/
void dropTable(char* tablename);

/*******************************************************************************************************************
	函数：insert
	功能：将insertsql结构体中储存的用户输入行的信息转换为数据行，并将其插入到数据表的物理文件中
	input：指向insertsql结构体的指针
	output：void
*******************************************************************************************************************/
void insert(struct insertsql* insertsql);

/*******************************************************************************************************************
	函数：select
	功能：根据selectsql结构体中的查询信息，在指selectsql结构体指定的表中进行查询。支持多表查询、条件查询
	input：指向selectsql结构体的指针
	output：void
*******************************************************************************************************************/
void select(struct selectsql* selectsql);

/*******************************************************************************************************************
	函数：update
	功能：根据updatesql结构体中关于更新的信息，对数据表执行更新数据行操作。支持条件判断更新
	input：指向updatesql结构体的指针
	output：void
*******************************************************************************************************************/
void update(struct updatesql* updatesql);

/*******************************************************************************************************************
	函数：deletetable
	功能：根据deletesql结构体中关于删除的信息，从数据表中删除部分数据行，支持条件查询。
	input：指向deletesql结构体的指针
	output：void
*******************************************************************************************************************/
void deletetable(struct deletesql*);


#endif // !QUERYPROCESSOR_H
