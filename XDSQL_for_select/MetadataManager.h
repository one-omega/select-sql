#pragma once
/*
元数据管理器头文件，负责管理数据库元数据、数据表元数据、数据列元数据



库元数据表是数据库系统的系统表，表名为system_db,负责储存数据库系统中所有数据库的名称。表内存在以下数据列：
类型为char，长度为20的数据列，列名为dbname。dbname列储存各个数据库的名称



表元数据表是归各数据库拥有的系统表，表名为system_table，储存该数据库中所有表的信息，表内存在以下数据列：
类型为char，长度为20的数据列，列名tablename，负责储存表名
类型为int，长度为4的数据列，列名colnum。负责储存表有多少列
类型为int，长度为4的数据列，列名rowlength，负责储存表中一个元组的长度（以字节为单位）



列元数据表是归各数据库拥有的系统表，表名为system_col,储存该数据库中所有逻辑表中各列的信息。表内存在以下数据列：
类型为char，长度为20的数据列，列名colname，储存列的名称
类型为char，长度为20的数据列，列名tablename，储存所属表的表名
类型为int，长度为4的数据列，列名coltype，储存列的数据类型
类型为char，长度为5的数据列，列名coltypename，储存
类型为int，长度为4的数据列，列名size，储存列在内存中的长度
类型为int，长度为4的数据列，列名order，储存该列在元组中的顺序



对应结构体分别为
system_db对应dbNode
system_table对应tableNode
system_col对应colNode


各系统表对应链表分别为
dbNodeList
tableNodeList
colNodeList
*/

#ifndef METADATAMANAGER_H
#define METADATAMANAGER_H

/*
	结构体：dbNode
	功能：储存库元信息
*/
typedef struct dbNode {
	char* dbname;				/*数据库名，字符串类型*/
	struct dbNode* next;		/*用在链表中的next指针*/
}dbNode;



/*
	结构体：tableNode
	功能：储存表元信息
*/
typedef struct tableNode {
	char* tablename;			/*表名*/
	int colnum;					/*表中列的数量*/
	int rowlength;				/*表中一行数据的长度*/
	struct tableNode* next;		/*用在链表中的next指针*/
}tableNode;


/*
	结构体：colNode
	功能：储存列元信息
*/
typedef struct colNode {
	char* colname;				/*列名，字符串类型*/
	char* tablename;			/*列属于的表的表名*/
	int coltype;				/*列的数据类型，用数字编号表示*/
	char* coltypename;			/*列的数据类型，用字符串表示*/
	int size;					/*该列储存在物理文件中的长度（以字节为单位）*/
	int order;					/*该列在元组中的顺序*/
	struct colNode* next;		/*用在链表中的next指针*/
}colNode;


/*
	链表：dbNodeList
	功能：库元节点链表
*/
typedef struct dbNodeList {
	dbNode* head;			/*链表头节点*/
	dbNode* tail;			/*链表尾节点*/
	int num = 0;			/*链表中节点的数量*/
}dbNodeList;

/*
	链表：tableNodeList
	功能：表元节点链表
*/
typedef struct tableNodeList {
	tableNode* head;		/*链表头节点*/
	tableNode* tail;		/*链表尾节点*/
	int num = 0;			/*链表中结点的数量*/
}tableNodeList;


/*
	链表：colNodeList
	功能：列元节点链表
*/
typedef struct colNodeList {
	colNode* head;			/*链表头节点*/
	colNode* tail;			/*链表尾节点*/
	int num = 0;			/*链表中结点的数量*/
}colNodeList;






/************************************************************************************************************
	函数：dbNodeToRow
	功能：将dbNode节点中dbname成员提取出并生成库元数据表的一行数据
	input：指向一个dbNode结构体的指针
	output：库元数据表的一行数据，字符串类型
*************************************************************************************************************/
char* dbNodeToRow(dbNode*);

/************************************************************************************************************
	函数：rowToDBNode
	功能：将字符串Row中的数据赋给dbNode节点中dbname成员
	input：库元数据表的一行数据，字符串类型
	output：指向一个dbNode结构体的指针
*************************************************************************************************************/
dbNode* rowToDBNode(char*);

/************************************************************************************************************
	函数：tableNodeToRow
	功能：将tableNode节点中的数据提取出来并组成表元数据表的一行数据
	input：指向一个tableNode节点的指针
	output：表元数据表的一行数据，字符串类型
*************************************************************************************************************/
char* tableNodeToRow(tableNode*);

/************************************************************************************************************
	函数：rowToTableNode
	功能：将表元数据表的一行数据中的数据提取出来，并赋值给TableNode的各个成员
	input：表元数据表的一行数据，字符串类型
	output：指向TableNode节点的指针
*************************************************************************************************************/
tableNode* rowToTableNode(char*);

/************************************************************************************************************
	函数：colNodeToRow
	功能：将colNodeToRow节点中的数据提取出来并组成列元数据表的一行数据
	input：指向一个colNodeToRow节点的指针
	output：列元数据表的一行数据，字符串类型
*************************************************************************************************************/
char* colNodeToRow(colNode*);

/************************************************************************************************************
	函数：rowToColNode
	功能：将表元数据表的一行数据中的数据提取出来，并赋值给rowToColNode的各个成员
	input：列元数据表的一行数据，字符串类型
	output：指向rowToColNode节点的指针
*************************************************************************************************************/
colNode* rowToColNode(char*);


/************************************************************************************************************
	函数：createDBNode
	功能：创建并初始化一个DBNode节点
	input：void
	output：指向DBNode节点的指针
*************************************************************************************************************/
dbNode* createDBNode();

/************************************************************************************************************
	函数：createTableNode
	功能：创建并初始化一个TableNode节点
	input：void
	output：指向TableNode节点的指针
*************************************************************************************************************/
tableNode* createTableNode();

/************************************************************************************************************
	函数：createColNode
	功能：创建并初始化一个ColNode节点
	input：void
	output：指向ColNode节点的指针
*************************************************************************************************************/
colNode* createColNode();

/************************************************************************************************************
	函数：setDBNode
	功能：使用给定的数据给dbNode节点成员赋值
	input：指向dbNode节点的指针，字符串dbname
	output：void
*************************************************************************************************************/
void setDBNode(dbNode* node, char* dbname);

/************************************************************************************************************
	函数：setTableNode
	功能：使用给定的数据给TableNode节点成员赋值
	input：指向tableNode节点的指针，字符串tablename，int变量colnum，int变量rowlength
	output：void
*************************************************************************************************************/
void setTableNode(tableNode* node, char* tablename, int colnum, int rowlength);

/************************************************************************************************************
	函数：setColNode
	功能：使用给定的数据给ColNode节点成员赋值
	input：指向ColNode节点的指针，字符串colname。字符串tablename，int变量coltype，int变量size，int变量order
	output：void
*************************************************************************************************************/
void setColNode(colNode* node, char* colname, char* tablename, int coltype, int size, int order);

/************************************************************************************************************
	函数：deleteDBNode
	功能：删除给定的dbNode节点，并释放内存空间
	input：指向dbNode节点的指针
	output：void
*************************************************************************************************************/
void deleteDBNode(dbNode* node);

/************************************************************************************************************
	函数：deleteTableNode
	功能：删除给定的TableNode节点，并释放内存空间
	input：指向TableNode节点的指针
	output：void
*************************************************************************************************************/
void deleteTableNode(tableNode* node);

/************************************************************************************************************
	函数：deleteColNode
	功能：删除给定的ColNode节点，并释放内存空间
	input：指向ColNode节点的指针
	output：void
*************************************************************************************************************/
void deleteColNode(colNode* node);

/************************************************************************************************************
	函数：addDBNode
	功能：将给定的dbNode节点加入dbNodeList链表中
	input：指向dbNodeList链表的指针，指向dbNode节点的指针
	output：void
*************************************************************************************************************/
void addDBNode(dbNodeList* list, dbNode* node);

/************************************************************************************************************
	函数：addTableNode
	功能：将给定的TableNode节点加入tableNodeList链表中
	input：指向tableNodeList链表的指针，指向TableNode节点的指针
	output：void
*************************************************************************************************************/
void addTableNode(tableNodeList* list, tableNode* node);

/************************************************************************************************************
	函数：addColNode
	功能：将给定的colNode节点加入colNodeList链表中
	input：指向colNodeList链表的指针，指向colNode节点的指针
	output：void
*************************************************************************************************************/
void addColNode(colNodeList* list, colNode* node);

/************************************************************************************************************
	函数：deleteDBNodeList
	功能：删除dbNodeList链表
	input：指向dbNodeList链表的指针
	output：void
*************************************************************************************************************/
void deleteDBNodeList(dbNodeList* list);

/************************************************************************************************************
	函数：deleteTableNodeList
	功能：删除tableNodeList链表
	input：指向tableNodeList链表的指针
	output：void
*************************************************************************************************************/
void deleteTableNodeList(tableNodeList* list);

/************************************************************************************************************
	函数：deleteColNodeList
	功能：删除colNodeList链表
	input：指向colNodeList链表的指针
	output：void
*************************************************************************************************************/
void deleteColNodeList(colNodeList* list);

/************************************************************************************************************
	函数：appendTableNodeList
	功能：将tableNodeList链表list2追加到list1的末尾
	input：指向tableNodeList链表的指针list1指针、指向另一个tableNodeList链表的list2指针
	output：void
*************************************************************************************************************/
/* 将list2追加到list1尾 */
void appendTableNodeList(tableNodeList* list1, tableNodeList* list2);

/************************************************************************************************************
	函数：appendColNodeList
	功能：将colNodeList链表list2追加到list1的末尾
	input：指向colNodeList链表的指针list1指针、指向另一个colNodeList链表的list2指针
	output：void
*************************************************************************************************************/
void appendColNodeList(colNodeList* list1, colNodeList* list2);

/************************************************************************************************************
	函数：insertDB
	功能：将dbNode节点中的数据库信息加入库元数据表的物理文件中
	input：指向dbNode节点的指针
	output：信息加入成功返回reue，否则返回false
*************************************************************************************************************/
bool insertDB(dbNode* dbNode);

/************************************************************************************************************
	函数：deleteDB
	功能：从系统库元数据表中删除dbname字符串指定的数据行
	input：要删除的数据库名dbname（字符串类型）
	output：删除成功返回true，否则返回false
*************************************************************************************************************/
bool deleteDB(char* dbname);


/************************************************************************************************************
	函数：selectDB
	功能：在库元数据表中查询名称为dbname的数据库，并获得该数据库的信息。若dbname为空，则返回所有数据库的信息
	input：数据库名称（字符串类型）
	output：指向dbNodeList链表的指针，链表储存所有查询到的目标数据库的信息
*************************************************************************************************************/
dbNodeList* selectDB(char* dbname);

/************************************************************************************************************
	函数：updateDB
	功能：更新库元数据表中的行（该接口没有实际修改库元数据表，留作以后开发用）
	input：指向dbNode节点的指针，该dbNode节点中储存更新后的行数据
	output：更新成功返回true，失败返回false
*************************************************************************************************************/
bool updateDB(dbNode* newNode);

/************************************************************************************************************
	函数：createDBTable
	功能：在dbname对应的数据库目录下建立属于该数据库的表元数据表；若dbname为NULL，则在数据库系统目录下建立系统的表元数据表
	input：数据库名称（字符串类型）
	output：表元数据表创建成功返回true，否则返回false
*************************************************************************************************************/
bool createDBTable(char* dbname);

/************************************************************************************************************
	函数：insertDBTable
	功能：将一行数据插入到表元数据表的末尾
	input：指向tableNode的指针，tableNode中储存要插入行的信息；
		   dbname字符串储存数据库名称，指明表元数据表所属的数据库；若dbname为空，则目标表元数据表归系统所有
	output：数据插入成功返回true，否则返回false
*************************************************************************************************************/
bool insertDBTable(tableNode* tableNode, char* dbname);

/************************************************************************************************************
	函数：deleteDBTable
	功能：从指定的表元数据表中删除指定的表对应的数据行
	input：表元数据表所属数据库的名称dbname，要删除的表的表名tablename
	output：删除成功返回true，否则返回false
*************************************************************************************************************/
bool deleteDBTable(char* tablename,char* dbname);


/************************************************************************************************************
	函数：selectDBTable
	功能：在表元数据表中查询并返回给定的表的信息。若tablename为空，返回该数据库dbname中所有表的信息；若dbname为空，表元数据表为系统表元数据表
	input：数据库名dbname，该数据库中某一表的表名tablename
	output：tableNodeList链表，储存查询到的信息
*************************************************************************************************************/
tableNodeList* selectDBTable(char* tablename, char* dbname);


/************************************************************************************************************
	函数：updateDBTable
	功能：对表元数据表进行更新，目前没有开放该接口
	input：指向tableNode节点的指针，tableNode储存更新后的数据行的信息；字符串dbname是表元数据表所在的数据库的名称
	output：更新成功返回true，否则返回false
*************************************************************************************************************/
bool updateDBTable(tableNode* newNode, char* dbname);

/************************************************************************************************************
	函数：dropDBTable
	功能：将表元数据表的物理文件删除，在删除数据库时使用
	input：数据库名称dbname
	output：成功删除返回true，否则返回false
*************************************************************************************************************/
bool dropDBTable(char* dbname);

/************************************************************************************************************
	函数：createTableCol
	功能：在指定的数据库dbname目录下创建列元数据表。若dbname为空，则在数据库系统目录下创建列元数据包
	input：列元数据表所属的数据库的名称
	output：创建成功返回true，否则返回false
*************************************************************************************************************/
bool createTableCol(char* dbname);

/************************************************************************************************************
	函数：insertTableCol
	功能：将colNodeList链表中的列元信息（可能有多个列元信息）都插入dbname数据库中的列元数据表
	input：指向colNodeList链表的指针，列元数据表所属的数据库名称dbname
	output：插入成功返回true，否则返回false
*************************************************************************************************************/
bool insertTableCol(colNodeList* list, char* dbname);

/************************************************************************************************************
	函数：deleteTableCol
	功能：从dbname数据库的列元数据表中，删除属于tablename表的所有列的信息
	input：被删除列所属表的表名tablename，所属数据库的名称dbname
	output：删除成功返回true，否则返回false
*************************************************************************************************************/
bool deleteTableCol(char* tablename, char* dbname);


/************************************************************************************************************
	函数：selectTableCol
	功能：在dbname数据库的列元数据表中查询tablename表中所有列的信息，信息储存在链表中，返回链表
		  dbname为空时，表元数据表为系统表元数据表；tablename为空时，返回数据表所对应的所有列信息。
	input：要查询的表的名称tablename，表所属的数据库名称dbname
	output：储存查询信息的链表
*************************************************************************************************************/
colNodeList* selectTableCol(char* tablename, char* dbname);


/************************************************************************************************************
	函数：dropTableCol
	功能：删除列元信息表的物理文件
	input：列元信息表所属数据库的名称
	output：删除成功返回true，否则返回false
*************************************************************************************************************/
bool dropTableCol(char* dbname);


#endif // !METADATAMANAGER_H
